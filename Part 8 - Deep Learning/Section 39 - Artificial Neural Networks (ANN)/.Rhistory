dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting the Regression Model to the dataset
# Create your regressor here
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting the Regression Model to the dataset
# Create your regressor here
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
r
q()
install.packages('h2o')
setwd("F:/data-sets/Machine Learning A-Z/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
# ANN
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
library(h2o)
library(h2o)
library(h2o)
h2o.init(nthreads = -1)
h2o.init(nthreads = -1)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 999,
train_samples_per_iteration = -2)
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(y_pred >0.5 , 1, 0)
cm = table(test_set[, 3], y_pred)
y_pred = (y_pred >0.5)
cm = table(test_set[, 3], y_pred)
y_pred = as.vector(y_pred)
cm = table(test_set[, 3], y_pred)
cm
cm = table(test_set[, 11], y_pred)
cm
1539+194
1733/2000
h2o.shutdown()
h2o.shutdown()
y
r()
