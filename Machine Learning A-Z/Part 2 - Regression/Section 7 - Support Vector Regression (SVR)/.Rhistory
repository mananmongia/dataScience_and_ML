setwd("C:/data-sets/Machine Learning A-Z/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset = read.csv('Postion_salaries.csv')
setwd("C:/data-sets/Machine Learning A-Z/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Postion_salaries.csv')
dataset = read.csv('Postion_salaries.csv')
dataset = read.csv('Position_salaries.csv')
View(dataset)
dataset = dataset[2:3]
View(dataset)
View(dataset)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
View(lin_reg)
View(lin_reg)
summary(lin_reg)
dataset$Level2 = dataset$Level^2
View(dataset)
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
library("ggplot2", lib.loc="~/R/win-library/3.5")
ggplot() +
geom_point(aes(x = dataset$Level,y = dataset$Salary),
colour = 'red') +
geom_line(aes(x= dataset$Level,y = predict(poly_reg, newdata = dataset) ),colour = 'blue')
predict(poly_reg,newdata = 6.5)
predict(poly_reg,6.5)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level,y = dataset$Salary),
colour = 'red') +
geom_line(aes(x= dataset$Level,y = predict(poly_reg, newdata = dataset) ),colour = 'blue')
predict(poly_reg,6.5)
predict(poly_reg,data.frame(6.5))
predict(poly_reg,data.frame(Level = 6.5))
y_pred = predict(poly_reg,data.frame(Level = 6.5))
y_pred = predict(poly_reg,data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
print(y_pred)
print(predict(poly_reg,data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4)))
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Position_salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level,y = dataset$Salary),
colour = 'red') +
geom_line(aes(x= dataset$Level,y = predict(poly_reg, newdata = dataset) ),colour = 'blue')
print(predict(poly_reg,data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4)))
setwd("~/data-sets/Machine Learning A-Z/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset$Level4 = dataset$Level^4
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Position_salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level,y = dataset$Salary),
colour = 'red') +
geom_line(aes(x= dataset$Level,y = predict(poly_reg, newdata = dataset) ),colour = 'blue')
print(predict(poly_reg,data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4)))
dataset = read.csv('Position_salaries.csv')
dataset = dataset[2:3]
# Polynomial Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualising the Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Polynomial Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
# Predicting a new result with Linear Regression
predict(lin_reg, data.frame(Level = 6.5))
# Predicting a new result with Polynomial Regression
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Position_salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
#library(caTools)
#set.seed(123)
#split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
#training_set = subset(dataset, split == TRUE)
#test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level,y = dataset$Salary),
colour = 'red') +
geom_line(aes(x= dataset$Level,y = predict(poly_reg, newdata = dataset) ),colour = 'blue')
print(predict(poly_reg,data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4)))
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
setwd("~/data-sets/Machine Learning A-Z/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)")
# SVR
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting SVR to the dataset
# install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression',
kernel = 'radial')
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the SVR results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
# Visualising the SVR results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
